import { cursor } from './stores/cursor';
import { difficulty } from './stores/difficulty';
import { gamePaused } from './stores/game';
import { grid } from './stores/grid';
import { timer } from './stores/timer';
import { hints } from './stores/hints';
import { message } from './stores/message';
import { record } from './stores/record';
import { branchPoints, history } from './stores/branchPoints';
/**
 * Start new game with a generated sudoku
 *
 * @param {('veryeasy' | 'easy' | 'medium' | 'hard')} diff - Difficulty
 */
export function startNew(diff) {
	difficulty.set(diff);
	grid.generate(diff);
	cursor.reset();
	timer.reset();
	hints.reset();
	message.reset();
	record.reset();
	branchPoints.reset();
	history.reset();
	/**
	 * todo:
	 * branchPoints, message, record... reset
	 */

	location.hash = '';
}

/**
 * Start new game with a custom sudoku
 *
 * @param {string} sencode - Sencode to decode
 */
export function startCustom(sencode) {
	difficulty.setCustom();
	grid.decodeSencode(sencode);
	cursor.reset();
	timer.reset();
	hints.reset();
	message.reset();
	record.reset();
	branchPoints.reset();
	history.reset();
}

export function parseSudokuFromUrl(url) {
    const bd = new URL(url).searchParams.get('bd'); // board data.(string)
    if (!bd || !/^[0-9]{81}$/.test(bd)) {
        throw new Error("Failed to construct 'URL': Invalid URL");
    }
    const board = [];
    for (let i = 0; i < 9; i++) {
        const row = bd
            .slice(i * 9, i * 9 + 9)
            .split('')
            .map(Number);
        board.push(row);
    }
    return board;
}

export function startByImport(url) {
    let board;
    try {
        board = parseSudokuFromUrl(url);
    } catch (err) {
        message.set(err.message || '导入失败');
        return;
    }
	
	difficulty.setCustom();
	grid.set(board);
	cursor.reset();
	timer.reset();
	hints.reset();
	message.reset();
	record.reset();
	branchPoints.reset();
	history.reset();
}

/**
 * Pause the game
 */
export function pauseGame() {
	timer.stop();
	gamePaused.set(true);
}

/**
 * Resume (un-pause) the game
 */
export function resumeGame() {
	timer.start();
	gamePaused.set(false);
}

export default {
	startNew,
	startCustom,
	startByImport,
	pause: pauseGame,
	resume: resumeGame
};